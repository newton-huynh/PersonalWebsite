{"version":3,"sources":["NewtonHuynhWillRice.JPG","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","count","setcount","className","size","font","face","color","src","logo","alt","href","target","rel","onClick","window","open","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,iD,uLCkD5BC,MA9Cf,WAAgB,IAAD,EAEWC,mBAAS,GAFpB,mBAEPC,EAFO,KAEDC,EAFC,KAIb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,+BAAI,0BAAMC,KAAK,KAAKC,MAAI,EAACC,KAAK,UAA1B,gBAAJ,KACE,+BAAI,0BAAMF,KAAK,IAAIG,MAAM,MAAMF,MAAI,EAACC,KAAK,WAArC,sBAAJ,KACF,yBAAKE,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,qCAGA,uBACEP,UAAU,WACVQ,KAAK,sDACLC,OAAO,SACPC,IAAI,uBAJN,mCAQA,mDAAyBZ,EAAzB,UAEA,4BAAQE,UAAU,aAAaW,QAAS,WAE1B,IAARb,GACDc,OAAOC,KAAK,+CACZd,EAAS,IAETA,EAASD,EAAQ,KANtB,0CAYA,4BAAQa,QAAS,WAAKC,OAAOC,KAAK,iDAAlC,mCC3BYC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c8a55e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NewtonHuynhWillRice.3d6cc5ad.JPG\";","import React, {useState} from 'react';\nimport logo from '/Users/newtonhuynh/Desktop/Coding/my-app/src/NewtonHuynhWillRice.JPG';\nimport './App.css';\n\nfunction App() {\n\n  const[count,setcount] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p> <font size=\"20\" font face=\"Impact\">Newton Huynh</font> </p>\n          <p> <font size=\"5\" color=\"red\" font face=\"cursive\"> Will Rice College</font> </p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          woahhh \n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://www.linkedin.com/in/newton-huynh-53623b178/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Click here for LinkedIn Profile \n        </a>\n        <p> You have clicked me {count} times</p>\n\n        <button className=\"App-button\" onClick={()=>\n          {\n          if (count===4)\n            {window.open(\"https://www.youtube.com/watch?v=hHW1oY26kxQ\")\n            {setcount(0)}}\n          else\n            {setcount(count + 1)}\n          }\n        }>\n          Click me five times for study music :)\n        </button>\n\n        <button onClick={()=>{window.open(\"http://www.cutestpaw.com/tag/dogs/</header>\")}}>\n          Click me for cute dog photos \n        </button>\n\n       \n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}